AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 30

Resources:

  ExampleApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: live

  ExampleAFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        exports.handler = (event, context, callback) => {
        	callback(
        		null,
        		{
        			statusCode: 200,
        			body: JSON.stringify({
        				message: 'Hello World A'
        			})
        		});
        };
      AutoPublishAlias: live
      Events:
        ExampleApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ExampleApi
            Path: /example/a
            Method: get
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref ExampleAAliasErrorMetricGreaterThanZeroAlarm
          - !Ref ExampleALatestVersionErrorMetricGreaterThanZeroAlarm
        Hooks:
          PreTraffic: !Ref PreTrafficLambdaFunction
          PostTraffic: !Ref PostTrafficLambdaFunction

  ExampleAAliasErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub ${ExampleAFunction}:live
        - Name: FunctionName
          Value: !Ref ExampleAFunction
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  ExampleALatestVersionErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub ${ExampleAFunction}:live
        - Name: FunctionName
          Value: !Ref ExampleAFunction
        - Name: ExecutedVersion
          Value:
            Fn::GetAtt:
              - ExampleAFunction.Version
              - Version
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  ExampleBFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        exports.handler = (event, context, callback) => {
        	callback(
        		null,
        		{
        			statusCode: 200,
        			body: JSON.stringify({
        				message: 'Hello World B'
        			})
        		});
        };
      AutoPublishAlias: live
      Events:
        ExampleAApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ExampleApi
            Path: /example/b
            Method: get
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref ExampleBAliasErrorMetricGreaterThanZeroAlarm
          - !Ref ExampleBLatestVersionErrorMetricGreaterThanZeroAlarm
        Hooks:
          PreTraffic: !Ref PreTrafficLambdaFunction
          PostTraffic: !Ref PostTrafficLambdaFunction

  ExampleBAliasErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub ${ExampleBFunction}:live
        - Name: FunctionName
          Value: !Ref ExampleBFunction
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  ExampleBLatestVersionErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub ${ExampleBFunction}:live
        - Name: FunctionName
          Value: !Ref ExampleBFunction
        - Name: ExecutedVersion
          Value:
            Fn::GetAtt:
              - ExampleBFunction.Version
              - Version
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  PreTrafficLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        "use strict";

        const AWS = require("aws-sdk");
        const codedeploy = new AWS.CodeDeploy();

        exports.handler = (event, context, callback) => {

          console.log("Entering PreTraffic hook.");

          // Read the DeploymentId and LifecycleEventHookExecutionId from the event payload
          const deploymentId = event.DeploymentId;
          const lifecycleEventHookExecutionId = event.LifecycleEventHookExecutionId;
          var validationTestResult = "Failed";

          // Perform PreTraffic validation tests here. Set the test result
          // to "Succeeded" for this tutorial.
          console.log("This is where PreTraffic validation tests happen.")
          validationTestResult = "Succeeded";

          // Complete the PreTraffic hook by sending CodeDeploy the validation status
          const params = {
            deploymentId: deploymentId,
            lifecycleEventHookExecutionId: lifecycleEventHookExecutionId,
            status: validationTestResult // status can be 'Succeeded' or 'Failed'
          };

          // Pass AWS CodeDeploy the prepared validation test results.
          codedeploy.putLifecycleEventHookExecutionStatus(params, (err, data) => {
           if (err) {
             // Validation failed.
             console.log('PreTraffic validation tests failed');
             console.log(err, err.stack);
             callback("CodeDeploy Status update failed");
           } else {
             // Validation succeeded.
             console.log("PreTraffic validation tests succeeded");
             callback(null, "PreTraffic validation tests succeeded");
           }
          });
        }
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource: !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt ExampleAFunction.Arn
                - !GetAtt ExampleBFunction.Arn
      FunctionName: CodeDeployHook_preTrafficHook
      Environment:
        Variables:
          ExampleAFunctionCurrentVersion: !Ref ExampleAFunction.Version
          ExampleBFunctionCurrentVersion: !Ref ExampleBFunction.Version

  PostTrafficLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        "use strict";

        const AWS = require("aws-sdk");
        const codedeploy = new AWS.CodeDeploy();

        exports.handler = (event, context, callback) => {

          console.log("Entering PostTraffic hook.");

          // Read the DeploymentId and LifecycleEventHookExecutionId from the event payload
          const deploymentId = event.DeploymentId;
          const lifecycleEventHookExecutionId = event.LifecycleEventHookExecutionId;
          var validationTestResult = "Failed";

          // Perform PostTraffic validation tests here. Set the test result
          // to "Succeeded" for this tutorial.
          console.log("This is where PostTraffic validation tests happen.")
          validationTestResult = "Succeeded";

          // Complete the PostTraffic hook by sending CodeDeploy the validation status
          const params = {
            deploymentId: deploymentId,
            lifecycleEventHookExecutionId: lifecycleEventHookExecutionId,
            status: validationTestResult // status can be 'Succeeded' or 'Failed'
          };

          // Pass AWS CodeDeploy the prepared validation test results.
          codedeploy.putLifecycleEventHookExecutionStatus(params, (err, data) => {
           if (err) {
             // Validation failed.
             console.log('PostTraffic validation tests failed');
             console.log(err, err.stack);
             callback("CodeDeploy Status update failed");
           } else {
             // Validation succeeded.
             console.log("PostTraffic validation tests succeeded");
             callback(null, "PostTraffic validation tests succeeded");
           }
          });
        }
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource: !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt ExampleAFunction.Arn
                - !GetAtt ExampleBFunction.Arn
      FunctionName: CodeDeployHook_postTrafficHook
      Environment:
        Variables:
          ExampleAFunctionCurrentVersion: !Ref ExampleAFunction.Version
          ExampleBFunctionCurrentVersion: !Ref ExampleBFunction.Version